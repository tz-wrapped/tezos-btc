# SPDX-FileCopyrightText: 2019 Bitcoin Suisse
# SPDX-License-Identifier: LicenseRef-MIT-BitcoinSuisse

env:
  TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER: "Y"

steps:
  - label: hlint
    key: hlint
    if: &not_scheduled_autodoc
      build.branch != "autodoc/master" && build.branch != "master" && build.source != "schedule"
    commands:
    - nix shell .#haskellPackages.hlint -c
        ./scripts/lint.sh

  - label: check
    if: *not_scheduled_autodoc
    commands:
    - nix flake check -L

  - label: xrefcheck
    if: *not_scheduled_autodoc
    commands:
    - nix shell .#xrefcheck --impure -c xrefcheck

  - label: build
    key: build
    if: *not_scheduled_autodoc
    depends_on: hlint
    commands:
    - nix build -L .#all-components

  - label: test
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix build .#tzbtc:test:tzbtc-test
    - ./result/bin/tzbtc-test --cleveland-mode=disable-network

  - &local-chain
    label: test-local-chain-017
    if: *not_scheduled_autodoc
    depends_on: build
    env: &local-chain-env
      TASTY_CLEVELAND_NODE_ENDPOINT: "http://localhost:8734"
      CHAIN_TEST_MONEYBAG_SECRET_KEY: "unencrypted:edsk3D3Gx5q6mVL4jCAuFCoekWjM6hzrmSA3MCtDUnMAjxmxJ2rtes"
      # this key is defined in local-chain bootstrap accounts list in
      # https://github.com/serokell/aquarius-infra/blob/master/servers/albali/chain.nix
    commands: &run-nettest
    - export PATH=$(nix build .#tzbtc:exe:tzbtc-client --print-out-paths)/bin:$PATH
    - nix build -L .#tzbtc:test:tzbtc-test --out-link tzbtc-test
    # Note that 'refill-balance' below is the initial 'TASTY_CLEVELAND_MONEYBAG_SECRET_KEY' balance
    # which may need to be adjusted in case of insufficient balance errors
    - $(nix-build . -A utils.run-chain-tests
        --argstr refill-balance 3300
        --argstr node-endpoint "$$TASTY_CLEVELAND_NODE_ENDPOINT"
        --argstr step-moneybag "$$CHAIN_TEST_MONEYBAG_SECRET_KEY"
        --argstr step-moneybag-password "$$CHAIN_TEST_MONEYBAG_PASSWORD"
        --no-out-link
        --argstr scenario './tzbtc-test/bin/tzbtc-test --cleveland-mode=only-network')
    retry: &retry-nettest
      automatic:
        limit: 1

  - &nettest
    label: scheduled nairobinet test
    if: build.source == "schedule"
    depends_on: build
    env: &nettest-env
      TASTY_CLEVELAND_NODE_ENDPOINT: "https://nairobi.testnet.tezos.serokell.team"
      CHAIN_TEST_MONEYBAG_SECRET_KEY: "$TESTNET_MONEYBAG"
      CHAIN_TEST_MONEYBAG_PASSWORD: "$TESTNET_MONEYBAG_PASSWORD"
    commands: *run-nettest
    retry:
      automatic:
        limit: 1
    timeout_in_minutes: 240

  - label: weeder
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix build -L .#weeder-script
      # weeder needs .cabal file:
    - nix shell .#haskellPackages.hpack -c hpack
    - ./result

  - label: bats
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix shell .#bats .#tzbtc:exe:tzbtc
        -c bats bats/tzbtc.bats
    - nix shell .#bats .#octez-client .#tzbtc:exe:tzbtc-client
        -c bats bats/tzbtc-client.bats

  - label: contract-doc
    key: contract-doc
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix build -L .#contract-doc-dev
    - ln -s ./result/TZBTC-contract.md TZBTC-contract.md
    artifact_paths:
      - TZBTC-contract.md

  # for master branch we include commit info in the contract doc
  - label: contract-doc (master)
    key: contract-doc-master
    if: &not_scheduled_master
      build.branch == "master" && build.source != "schedule"
    depends_on: build
    commands:
    - nix-build . -A utils.contract-doc-release
        --argstr sha "$(git rev-parse HEAD)"
        --argstr date "$(git log HEAD -1 --format=%cd)"
    - ln -s ./result/TZBTC-contract.md TZBTC-contract.md
    artifact_paths:
      - TZBTC-contract.md

  - label: xrefcheck generated doc
    key: xrefcheck-generated
    if: *not_scheduled_autodoc
    depends_on:
      - contract-doc
      - contract-doc-master
    commands:
    - mkdir tmp
    - if [ "$BUILDKITE_BRANCH" = "master" ];
      then CONTRACT_DOC_STEP="contract-doc (master)";
      else CONTRACT_DOC_STEP="contract-doc";
      fi
    - buildkite-agent artifact download TZBTC-contract.md tmp/ --step "$$CONTRACT_DOC_STEP"
    - nix shell .#xrefcheck --impure -c xrefcheck --root tmp

  - label: autodoc upload
    if: *not_scheduled_master
    depends_on: contract-doc-master
    commands:
    - mkdir tmp
    - buildkite-agent artifact download TZBTC-contract.md tmp/ --step "contract-doc (master)"
    - ./scripts/ci/upload-autodoc.sh

  - wait

  - label: packaging
    key: packaging
    if: build.branch != "autodoc/master" && build.source != "schedule"
    commands:
    - nix-build -A release.static -o tzbtc-static
    - nix-build -A release.deb -o tzbtc-client-deb
    - nix-build -A release.rpm -o tzbtc-client-rpm
    artifact_paths:
      - ./tzbtc-static/bin/tzbtc-client
      - ./tzbtc-client-deb/*
      - ./tzbtc-client-rpm/*

  - label: create auto prerelease
    if: build.branch == "master" && build.source != "schedule"
    depends_on: packaging
    commands:
    - mkdir assets
    - buildkite-agent artifact download tzbtc-static/bin/tzbtc-client . --step packaging
    - buildkite-agent artifact download tzbtc-client-deb/*.deb . --step packaging
    - buildkite-agent artifact download tzbtc-client-rpm/*.rpm . --step packaging
    - buildkite-agent artifact download TZBTC-contract.md assets/ --step "contract-doc (master)"
    - cp tzbtc-static/bin/tzbtc-client assets/
    - cp tzbtc-client-deb/*.deb assets/
    - cp tzbtc-client-rpm/*.rpm assets/
    # delete existing auto-release if present
    - nix shell .#gitAndTools.gh -c gh release delete auto-release --yes || true
    - nix shell .#git -c git fetch && git tag -f auto-release && git push --force --tags
    - nix shell .#gitAndTools.gh -c gh release create --prerelease auto-release --title auto-release --notes ""
    - nix shell .#gitAndTools.gh -c gh release upload auto-release assets/*

notify:
  - email: "tezos-alerts@serokell.io"
    if: build.state == "failed" && build.source == "schedule"
