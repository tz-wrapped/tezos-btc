# SPDX-FileCopyrightText: 2019 Bitcoin Suisse
# SPDX-License-Identifier: LicenseRef-MIT-BitcoinSuisse

env:
  TEZOS_CLIENT_UNSAFE_DISABLE_DISCLAIMER: "Y"
  # Note that testnet moneybag can run out of tz. If this happened, someone should transfer it some
  # more tz, its address: tz1Vona7MnADxXVFugpHohxSTFmah5Aj5xBM
  TASTY_NETTEST_IMPORT_SECRET_KEY: "unencrypted:edsk3D3Gx5q6mVL4jCAuFCoekWjM6hzrmSA3MCtDUnMAjxmxJ2rtes"
  # this key is defined in local-chain bootstrap accounts list in
  # https://github.com/serokell/aquarius-infra/blob/master/servers/albali/chain.nix

steps:
  - label: hlint
    key: hlint
    if: &not_scheduled_autodoc
      build.branch != "autodoc/master" && build.branch != "master" && build.source != "schedule"
    commands:
    - nix run -f ci.nix pkgs.hlint -c
        ./scripts/lint.sh

  - label: reuse lint
    if: *not_scheduled_autodoc
    commands:
    - nix run -f ci.nix pkgs.reuse -c
        reuse lint

  - label: check trailing whitespace
    if: *not_scheduled_autodoc
    commands:
    - .buildkite/check-trailing-whitespace.sh

  - label: crossref-verify
    if: *not_scheduled_autodoc
    commands:
    - nix run -f ci.nix crossref-verifier -c
        crossref-verify --mode local-only --config ./.crossref-verifier.yaml
    soft_fail: true # TODO: remove

  - label: build
    key: build
    if: *not_scheduled_autodoc
    depends_on: hlint
    commands:
    - nix-build ci.nix -A all-components

  - label: test
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix-build ci.nix -A tzbtc.components.tests.tzbtc-test
    - ./result/bin/tzbtc-test --nettest-mode=disable-network

  - label: test-local-chain-010
    if: *not_scheduled_autodoc
    depends_on: build
    env:
      TASTY_NETTEST_NODE_ENDPOINT: "http://localhost:8733"
    commands: &run-nettest
    - nix-build ci.nix -A tzbtc.components.tests.tzbtc-test
    - export TASTY_NETTEST_DATA_DIR="$(mktemp -d --tmpdir="$$PWD")"
    - nix run -f ci.nix tezos-client tzbtc.components.exes.tzbtc-client -c ./result/bin/tzbtc-test
      --nettest-mode=only-network

  - label: test-local-chain-011
    if: *not_scheduled_autodoc
    depends_on: build
    env:
      TASTY_NETTEST_NODE_ENDPOINT: "http://localhost:8734"
    commands: *run-nettest

  - label: scheduled granadanet test
    if: build.source == "schedule"
    depends_on: build
    env:
      TASTY_NETTEST_NODE_ENDPOINT: "https://granada.testnet.tezos.serokell.team"
    commands: *run-nettest
    retry:
      automatic:
        limit: 1
    timeout_in_minutes: 240

  - label: scheduled hangzhounet test
    if: build.source == "schedule"
    depends_on: build
    env:
      TASTY_NETTEST_NODE_ENDPOINT: "https://hangzhou.testnet.tezos.serokell.team"
    commands: *run-nettest
    retry:
      automatic:
        limit: 1
    timeout_in_minutes: 240

  - label: weeder
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix-build ci.nix -A weeder-script
      # weeder needs .cabal file:
    - nix run -f ci.nix pkgs.haskellPackages.hpack -c hpack
    - ./result

  - label: bats
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix run -f ci.nix pkgs.bats tzbtc.components.exes.tzbtc
        -c bats bats/tzbtc.bats
    - nix run -f ci.nix pkgs.bats tezos-client tzbtc.components.exes.tzbtc-client
        -c bats bats/tzbtc-client.bats

  - label: contract-doc
    key: contract-doc
    if: *not_scheduled_autodoc
    depends_on: build
    commands:
    - nix-build ci.nix -A contract-doc-dev
    - ln -s ./result/TZBTC-contract.md TZBTC-contract.md
    artifact_paths:
      - TZBTC-contract.md

  # for master branch we include commit info in the contract doc
  - label: contract-doc (master)
    key: contract-doc-master
    if: &not_scheduled_master
      build.branch == "master" && build.source != "schedule"
    depends_on: build
    commands:
    - nix-build ci.nix -A contract-doc-release
        --argstr sha "$(git rev-parse HEAD)"
        --argstr date "$(git log HEAD -1 --format=%cd)"
    - ln -s ./result/TZBTC-contract.md TZBTC-contract.md
    artifact_paths:
      - TZBTC-contract.md

  - label: crossref-verify generated doc
    key: crossref-verify-generated
    if: *not_scheduled_autodoc
    depends_on:
      - contract-doc
      - contract-doc-master
    commands:
    - mkdir tmp
    - if [ "$BUILDKITE_BRANCH" = "master" ];
      then CONTRACT_DOC_STEP="contract-doc (master)";
      else CONTRACT_DOC_STEP="contract-doc";
      fi
    - buildkite-agent artifact download TZBTC-contract.md tmp/ --step "$$CONTRACT_DOC_STEP"
    - nix run -f ci.nix crossref-verifier -c
        crossref-verify --mode local-only --config ./.crossref-verifier.yaml --root tmp
    soft_fail: true # TODO: remove

  - label: autodoc upload
    if: *not_scheduled_master
    depends_on: contract-doc-master
    commands:
    - mkdir tmp
    - buildkite-agent artifact download TZBTC-contract.md tmp/ --step "contract-doc (master)"
    - ./scripts/ci/upload-autodoc.sh

  - wait

  - label: packaging
    key: packaging
    if: build.branch != "autodoc/master" && build.source != "schedule"
    commands:
    - nix-build release.nix -A static -o tzbtc-static
    - nix-build release.nix -A deb -o tzbtc-client-deb
    - nix-build release.nix -A rpm -o tzbtc-client-rpm
    artifact_paths:
      - ./tzbtc-static/bin/tzbtc-client
      - ./tzbtc-client-deb/*
      - ./tzbtc-client-rpm/*

  - label: create auto prerelease
    if: build.branch == "master" && build.source != "schedule"
    depends_on: packaging
    commands:
    - mkdir assets
    - buildkite-agent artifact download tzbtc-static/bin/tzbtc-client . --step packaging
    - buildkite-agent artifact download tzbtc-client-deb/*.deb . --step packaging
    - buildkite-agent artifact download tzbtc-client-rpm/*.rpm . --step packaging
    - buildkite-agent artifact download TZBTC-contract.md assets/ --step "contract-doc (master)"
    - cp tzbtc-static/bin/tzbtc-client assets/
    - cp tzbtc-client-deb/*.deb assets/
    - cp tzbtc-client-rpm/*.rpm assets/
    # delete existing auto-release if present
    - nix run -f ci.nix pkgs.gitAndTools.gh -c gh release delete auto-release --yes || true
    - nix run -f ci.nix pkgs.git -c git fetch && git tag -f auto-release && git push --force --tags
    - nix run -f ci.nix pkgs.gitAndTools.gh -c gh release create --prerelease auto-release --title auto-release --notes ""
    - nix run -f ci.nix pkgs.gitAndTools.gh -c gh release upload auto-release assets/*

notify:
  - email: "tezos-alerts@serokell.io"
    if: build.state == "failed" && build.source == "schedule"
